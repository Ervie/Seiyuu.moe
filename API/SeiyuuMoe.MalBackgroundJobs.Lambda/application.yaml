AWSTemplateFormatVersion: '2010-09-09'
Description: Application stack for MAL Bg Jobs
Transform: AWS::Serverless-2016-10-31

Parameters:
  EnvironmentType:
    Type: String
    AllowedValues:
      - dev
      - prod

Conditions:
  IsProdEnvironment: !Equals [ !Ref EnvironmentType, prod ]

Mappings:
  Exports:
    KmsKeyArn:
      dev: seiyuu-moe-sec-dev-kms-key-arn
      prod: seiyuu-moe-sec-prod-kms-key-arn
    ApplicationSecurityGroupId:
      dev: seiyuu-moe-sec-dev-app-security-group
      prod: seiyuu-moe-sec-prod-app-security-group

Resources:
  JobsStateBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub jobs-state-bucket-${EnvironmentType}
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID:
                Fn::ImportValue: !FindInMap [ Exports, KmsKeyArn, !Ref EnvironmentType ]
              SSEAlgorithm: aws:kms

  JobsStateBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref JobsStateBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Principal: '*'
            Action: s3:PutObject
            Resource: !Sub ${JobsStateBucket.Arn}/*
            Condition:
              StringNotEquals:
                s3:x-amz-server-side-encryption-aws-kms-key-id:
                  Fn::ImportValue: !FindInMap [ Exports, KmsKeyArn, !Ref EnvironmentType ]

  ScheduleLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - !Ref ParameterStoreAccessPolicy
      Policies:
        - PolicyName: AllowToPopulateSqs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:SendMessageBatch
                Resource: 
                  - !GetAtt AnimeToUpdateQueue.Arn
                  - !GetAtt CharactersToUpdateQueue.Arn
                  - !GetAtt SeiyuuToUpdateQueue.Arn
  
  UpdateLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - !Ref ParameterStoreAccessPolicy
      Policies:
        - PolicyName: AllowToReadFromSqs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:DeleteMessage
                  - sqs:ReceiveMessage
                  - sqs:ChangeMessageVisibility
                  - sqs:GetQueueAttributes
                Resource: 
                  - !GetAtt AnimeToUpdateQueue.Arn
                  - !GetAtt CharactersToUpdateQueue.Arn
                  - !GetAtt SeiyuuToUpdateQueue.Arn
        - PolicyName: AllowAccessToJobsStateBucket
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub ${JobsStateBucket.Arn}/*
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !GetAtt JobsStateBucket.Arn
              - Effect: Allow
                Action: 
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource:
                  Fn::ImportValue: !FindInMap [Exports, KmsKeyArn, !Ref EnvironmentType ]

  ParameterStoreAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Description: Allows access to Parameter Store
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: ssm:GetParametersByPath
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
          - Effect: Allow
            Action: 
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource:
              Fn::ImportValue: !FindInMap [Exports, KmsKeyArn, !Ref EnvironmentType ]

  ScheduleAnimesUpdateRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0/15 * 8 * ? *)
      Name: !Sub schedule-animes-update-rule-${EnvironmentType}
      State: !If
        - IsProdEnvironment
        - ENABLED
        - DISABLED
      Targets:
        - Arn: !GetAtt ScheduleAnimesUpdate.Arn
          Id: LambdaTarget

  ScheduleAnimesUpdatePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref ScheduleAnimesUpdate
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: 
        !GetAtt ScheduleAnimesUpdateRule.Arn
  
  ScheduleAnimesUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: dotnet6
      Description: Lambda for pushing animes on queue for updating
      FunctionName: !Sub schedule-animes-update-${EnvironmentType}
      Handler: SeiyuuMoe.MalBackgroundJobs.Lambda::SeiyuuMoe.MalBackgroundJobs.Lambda.Function.ScheduleAnimesLambda::InvokeAsync
      MemorySize: 512
      Timeout: 180
      Role: !GetAtt ScheduleLambdaRole.Arn

  AnimeToUpdateQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub anime-to-update-queue-${EnvironmentType}
      DelaySeconds: 0
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy: 
        deadLetterTargetArn: !GetAtt AnimeToUpdateDLQ.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 30

  AnimeToUpdateDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub  dlq-${EnvironmentType}
      MessageRetentionPeriod: 1209600
      ReceiveMessageWaitTimeSeconds: 0

  UpdateAnime:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: dotnet6
      Description: Lambda for updating single anime
      FunctionName: !Sub update-anime-${EnvironmentType}
      Handler: SeiyuuMoe.MalBackgroundJobs.Lambda::SeiyuuMoe.MalBackgroundJobs.Lambda.Function.UpdateAnimeLambda::InvokeAsync
      MemorySize: 256
      Timeout: 30
      ReservedConcurrentExecutions: 1
      Role: !GetAtt UpdateLambdaRole.Arn
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            BatchSize: 1
            Queue: !GetAtt AnimeToUpdateQueue.Arn

  ScheduleSeiyuuUpdateRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0/15 2-22 ? * SUN *)
      Name: !Sub schedule-seiyuu-update-rule-${EnvironmentType}
      State: !If
        - IsProdEnvironment
        - ENABLED
        - DISABLED
      Targets:
        - Arn: !GetAtt ScheduleSeiyuuUpdate.Arn
          Id: LambdaTarget

  ScheduleSeiyuuUpdatePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref ScheduleSeiyuuUpdate
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: 
        !GetAtt ScheduleSeiyuuUpdateRule.Arn

  ScheduleSeiyuuUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: dotnet6
      Description: Lambda for pushing seiyuu on queue for updating
      FunctionName: !Sub schedule-seiyuu-update-${EnvironmentType}
      Handler: SeiyuuMoe.MalBackgroundJobs.Lambda::SeiyuuMoe.MalBackgroundJobs.Lambda.Function.ScheduleSeiyuuLambda::InvokeAsync
      MemorySize: 512
      Timeout: 180
      Role: !GetAtt ScheduleLambdaRole.Arn

  SeiyuuToUpdateQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub seiyuu-to-update-queue-${EnvironmentType}
      DelaySeconds: 0
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy: 
        deadLetterTargetArn: !GetAtt SeiyuuToUpdateDLQ.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 30

  SeiyuuToUpdateDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub seiyuu-dlq-${EnvironmentType}
      MessageRetentionPeriod: 1209600
      ReceiveMessageWaitTimeSeconds: 0

  UpdateSeiyuu:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: dotnet6
      Description: Lambda for updating single chraracter
      FunctionName: !Sub update-seiyuu-${EnvironmentType}
      Handler: SeiyuuMoe.MalBackgroundJobs.Lambda::SeiyuuMoe.MalBackgroundJobs.Lambda.Function.UpdateSeiyuuLambda::InvokeAsync
      MemorySize: 256
      Timeout: 300
      ReservedConcurrentExecutions: 1
      Role: !GetAtt UpdateLambdaRole.Arn
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            BatchSize: 1
            Queue: !GetAtt SeiyuuToUpdateQueue.Arn

  ScheduleCharactersUpdateRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0/15 * 14-20 * ? *)
      Name: !Sub schedule-characters-update-rule-${EnvironmentType}
      State: !If
        - IsProdEnvironment
        - ENABLED
        - DISABLED
      Targets:
        - Arn: !GetAtt ScheduleCharactersUpdate.Arn
          Id: LambdaTarget
  
  ScheduleCharactersUpdatePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref ScheduleCharactersUpdate
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: 
        !GetAtt ScheduleCharactersUpdateRule.Arn

  ScheduleCharactersUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: dotnet6
      Description: Lambda for pushing characters on queue for updating
      FunctionName: !Sub schedule-characters-update-${EnvironmentType}
      Handler: SeiyuuMoe.MalBackgroundJobs.Lambda::SeiyuuMoe.MalBackgroundJobs.Lambda.Function.ScheduleCharactersLambda::InvokeAsync
      MemorySize: 512
      Timeout: 180
      Role: !GetAtt ScheduleLambdaRole.Arn

  CharactersToUpdateQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub characters-to-update-queue-${EnvironmentType}
      DelaySeconds: 0
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy: 
        deadLetterTargetArn: !GetAtt CharactersToUpdateDLQ.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 30

  CharactersToUpdateDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub characters-dlq-${EnvironmentType}
      MessageRetentionPeriod: 1209600
      ReceiveMessageWaitTimeSeconds: 0

  UpdateCharacter:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: dotnet6
      Description: Lambda for updating single chraracter
      FunctionName: !Sub update-characters-${EnvironmentType}
      Handler: SeiyuuMoe.MalBackgroundJobs.Lambda::SeiyuuMoe.MalBackgroundJobs.Lambda.Function.UpdateCharacterLambda::InvokeAsync
      MemorySize: 256
      Timeout: 30
      ReservedConcurrentExecutions: 1
      Role: !GetAtt UpdateLambdaRole.Arn
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            BatchSize: 1
            Queue: !GetAtt CharactersToUpdateQueue.Arn

  UpdateSeasonsSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0 0 1 * ? *)
      Name: !Sub update-seasons-rule-${EnvironmentType}
      State: !If
        - IsProdEnvironment
        - ENABLED
        - DISABLED
      Targets:
        - Arn: !GetAtt UpdateSeasons.Arn
          Id: LambdaTarget
  
  UpdateSeasonsPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref UpdateSeasons
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: 
        !GetAtt UpdateSeasonsSchedule.Arn

  UpdateSeasons:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: dotnet6
      Description: Lambda for updating seasons table
      FunctionName: !Sub update-seasons-${EnvironmentType}
      Handler: SeiyuuMoe.MalBackgroundJobs.Lambda::SeiyuuMoe.MalBackgroundJobs.Lambda.Function.UpdateSeasonsLambda::InvokeAsync
      MemorySize: 256
      Timeout: 180
      Role: !GetAtt ScheduleLambdaRole.Arn

  InsertSeiyuuRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0 1 ? * SUN *)
      Name: !Sub insert-seiyuu-rule-${EnvironmentType}
      State: !If
        - IsProdEnvironment
        - ENABLED
        - DISABLED
      Targets:
        - Arn: !GetAtt InsertSeiyuu.Arn
          Id: LambdaTarget

  InsertSeiyuuPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref InsertSeiyuu
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: 
        !GetAtt InsertSeiyuuRule.Arn
  
  InsertSeiyuu:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: dotnet6
      Description: Lambda for inserting new seiyuu
      FunctionName: !Sub insert-seiyuu-${EnvironmentType}
      Handler: SeiyuuMoe.MalBackgroundJobs.Lambda::SeiyuuMoe.MalBackgroundJobs.Lambda.Function.InsertSeiyuuLambda::InvokeAsync
      MemorySize: 256
      Timeout: 900
      Role: !GetAtt UpdateLambdaRole.Arn

Globals:
  Function:
    Runtime: dotnet6
    MemorySize: 512
    Timeout: 150
    CodeUri: /bin/Release/net6.0/publish
    Description: !Ref AWS::StackName
    Tracing: Active
    Environment:
      Variables:
        EnvironmentType: !Ref EnvironmentType
        AnimeToUpdateQueueUrl: !Ref AnimeToUpdateQueue
        CharactersToUpdateQueueUrl: !Ref CharactersToUpdateQueue
        SeiyuuToUpdateQueueUrl: !Ref SeiyuuToUpdateQueue
        JobsStateBucket: !Ref JobsStateBucket
        StackName: !Ref AWS::StackName
    ## Uncomment for private subnets. Costly solution
    # VpcConfig:
    #   SubnetIds:
    #     - subnet-06a875e91c6a5d89b
    #     - subnet-0e1cec795f5a6a843
    #     - subnet-0ed5c9801b29d1176
    #   SecurityGroupIds:
    #     - Fn::ImportValue: !FindInMap [ Exports, ApplicationSecurityGroupId, !Ref EnvironmentType ]
    Tags:
      environment: !Ref EnvironmentType
      service-name: mal-bg-jobs