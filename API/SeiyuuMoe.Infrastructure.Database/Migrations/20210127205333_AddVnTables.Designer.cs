// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using SeiyuuMoe.Infrastructure.Database.Context;

namespace SeiyuuMoe.Infrastructure.Migrations
{
    [DbContext(typeof(SeiyuuMoeContext))]
    [Migration("20210127205333_AddVnTables")]
    partial class AddVnTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview.19074.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SeiyuuMoe.Domain.Entities.Anime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<string>("About")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("AiringDate")
                        .HasColumnType("DATE");

                    b.Property<string>("EnglishTitle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("KanjiTitle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("MalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModificationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<long?>("Popularity")
                        .HasColumnType("bigint");

                    b.Property<long?>("SeasonId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TitleSynonyms")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("TypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MalId")
                        .IsUnique();

                    b.HasIndex("SeasonId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Animes");
                });

            modelBuilder.Entity("SeiyuuMoe.Domain.Entities.AnimeCharacter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<string>("About")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("KanjiName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("MalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModificationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nicknames")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("Popularity")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MalId")
                        .IsUnique();

                    b.ToTable("AnimeCharacters");
                });

            modelBuilder.Entity("SeiyuuMoe.Domain.Entities.AnimeRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<Guid?>("AnimeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CharacterId")
                        .HasColumnType("char(36)");

                    b.Property<long?>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoleTypeId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("SeiyuuId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("RoleTypeId");

                    b.HasIndex("SeiyuuId");

                    b.ToTable("AnimeRoles");
                });

            modelBuilder.Entity("SeiyuuMoe.Domain.Entities.AnimeRoleType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("AnimeRoleTypes");
                });

            modelBuilder.Entity("SeiyuuMoe.Domain.Entities.AnimeSeason", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("Year")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AnimeSeasons");
                });

            modelBuilder.Entity("SeiyuuMoe.Domain.Entities.AnimeStatus", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("AnimeStatuses");
                });

            modelBuilder.Entity("SeiyuuMoe.Domain.Entities.AnimeType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("AnimeTypes");
                });

            modelBuilder.Entity("SeiyuuMoe.Domain.Entities.Blacklist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("MalId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Blacklists");
                });

            modelBuilder.Entity("SeiyuuMoe.Domain.Entities.Language", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("SeiyuuMoe.Domain.Entities.Seiyuu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<string>("About")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("DATE");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("KanjiName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("MalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModificationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("Popularity")
                        .HasColumnType("bigint");

                    b.Property<long?>("VndbId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MalId")
                        .IsUnique();

                    b.HasIndex("VndbId")
                        .IsUnique();

                    b.ToTable("Seiyuus");
                });

            modelBuilder.Entity("SeiyuuMoe.Domain.Entities.VisualNovel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<string>("About")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Alias")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ModificationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int>("Popularity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TitleOriginal")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("VndbId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VndbId")
                        .IsUnique();

                    b.ToTable("VisualNovels");
                });

            modelBuilder.Entity("SeiyuuMoe.Domain.Entities.VisualNovelCharacter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<string>("About")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("KanjiName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ModificationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nicknames")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("VndbId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VndbId")
                        .IsUnique();

                    b.ToTable("VisualNovelCharacters");
                });

            modelBuilder.Entity("SeiyuuMoe.Domain.Entities.VisualNovelRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(uuid())");

                    b.Property<Guid?>("CharacterId")
                        .HasColumnType("char(36)");

                    b.Property<long?>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoleTypeId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("SeiyuuId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("VisualNovelId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("RoleTypeId");

                    b.HasIndex("SeiyuuId");

                    b.HasIndex("VisualNovelId");

                    b.ToTable("VisualNovelRoles");
                });

            modelBuilder.Entity("SeiyuuMoe.Domain.Entities.VisualNovelRoleType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("VisualNovelRoleTypes");
                });

            modelBuilder.Entity("SeiyuuMoe.Domain.Entities.Anime", b =>
                {
                    b.HasOne("SeiyuuMoe.Domain.Entities.AnimeSeason", "Season")
                        .WithMany("Anime")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SeiyuuMoe.Domain.Entities.AnimeStatus", "Status")
                        .WithMany("Anime")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SeiyuuMoe.Domain.Entities.AnimeType", "Type")
                        .WithMany("Anime")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("SeiyuuMoe.Domain.Entities.AnimeRole", b =>
                {
                    b.HasOne("SeiyuuMoe.Domain.Entities.Anime", "Anime")
                        .WithMany("Role")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SeiyuuMoe.Domain.Entities.AnimeCharacter", "Character")
                        .WithMany("Role")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SeiyuuMoe.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("SeiyuuMoe.Domain.Entities.AnimeRoleType", "RoleType")
                        .WithMany("Role")
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SeiyuuMoe.Domain.Entities.Seiyuu", "Seiyuu")
                        .WithMany("AnimeRoles")
                        .HasForeignKey("SeiyuuId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SeiyuuMoe.Domain.Entities.VisualNovelRole", b =>
                {
                    b.HasOne("SeiyuuMoe.Domain.Entities.VisualNovelCharacter", "Character")
                        .WithMany("Role")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SeiyuuMoe.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("SeiyuuMoe.Domain.Entities.VisualNovelRoleType", "RoleType")
                        .WithMany("Role")
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SeiyuuMoe.Domain.Entities.Seiyuu", "Seiyuu")
                        .WithMany("VisualNovelRoles")
                        .HasForeignKey("SeiyuuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SeiyuuMoe.Domain.Entities.VisualNovel", "VisualNovel")
                        .WithMany("Role")
                        .HasForeignKey("VisualNovelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
